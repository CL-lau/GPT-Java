package com.clau.gpt.annotation.autogeneratedunittest.handler;

import com.clau.gpt.annotation.autogeneratedunittest.GenerateUnitTest;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.BeanPostProcessor;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.lang.reflect.Method;

@Component
public class GenerateUnitTestBeanPostProcessor implements BeanPostProcessor {

    @Autowired
    GenerateUnitTestHandler generateUnitTestHandler;

    public void processBeans() {
        // Empty method to trigger post-processing
    }

    @Override
    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
        return bean;
    }

    @Override
    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
        Class<?> clazz = bean.getClass();
        GenerateUnitTest classAnnotation = clazz.getAnnotation(GenerateUnitTest.class);
        if (classAnnotation != null) {
            System.out.println("开始执行postProcessAfterInitialization");
            String appKey = classAnnotation.appKey();
            String endpoint = classAnnotation.endpoint();
            String fileName = classAnnotation.fileName();

            // Process class-level scenario and generate test cases

            Method[] methods = clazz.getDeclaredMethods();
            for (Method method : methods) {
                GenerateUnitTest methodAnnotation = method.getAnnotation(GenerateUnitTest.class);
                if (methodAnnotation != null) {
                    // Process method-level scenario and generate test cases
                    try {
                        generateUnitTestHandler.handle(appKey, endpoint, fileName, method);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        return bean;
    }
}

